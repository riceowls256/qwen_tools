#!/usr/bin/env python3
"""
Qwen Coder 3 Usage Dashboard
Tracks API usage and costs for Qwen Coder 3 integration
"""

import json
import os
import sys
from datetime import datetime, timedelta
from pathlib import Path

class QwenDashboard:
    def __init__(self):
        self.config_dir = Path.home() / ".config" / "qwen-coder-3-tools"
        self.config_dir.mkdir(parents=True, exist_ok=True)
        self.usage_file = self.config_dir / "usage.json"
        self.costs_file = self.config_dir / "costs.json"
        
    def log_usage(self, model="qwen-coder-3-7b-instruct", tokens=0, cost=0.0):
        """Log API usage"""
        usage_data = {
            "timestamp": datetime.now().isoformat(),
            "model": model,
            "tokens": tokens,
            "cost": cost,
            "project": os.getcwd().split('/')[-1]
        }
        
        # Append to usage file
        with open(self.usage_file, 'a') as f:
            f.write(json.dumps(usage_data) + '\n')
    
    def get_daily_usage(self):
        """Get daily usage summary"""
        today = datetime.now().date()
        daily_usage = []
        
        if not self.usage_file.exists():
            return daily_usage
            
        with open(self.usage_file, 'r') as f:
            for line in f:
                try:
                    entry = json.loads(line.strip())
                    entry_date = datetime.fromisoformat(entry['timestamp']).date()
                    if entry_date == today:
                        daily_usage.append(entry)
                except:
                    continue
        return daily_usage
    
    def get_total_cost(self, days=7):
        """Get total cost for last N days"""
        total_cost = 0.0
        
        if not self.usage_file.exists():
            return total_cost
            
        cutoff_date = datetime.now().date() - timedelta(days=days)
        
        with open(self.usage_file, 'r') as f:
            for line in f:
                try:
                    entry = json.loads(line.strip())
                    entry_date = datetime.fromisoformat(entry['timestamp']).date()
                    if entry_date >= cutoff_date:
                        total_cost += entry.get('cost', 0.0)
                except:
                    continue
        return total_cost
    
    def display_report(self, days=7):
        """Display usage report"""
        print("ðŸ¤– Qwen Coder 3 Usage Dashboard")
        print("=" * 40)
        
        daily_usage = self.get_daily_usage()
        total_cost = self.get_total_cost(days)
        
        if daily_usage:
            print(f"ðŸ“Š Daily Usage ({len(daily_usage)} calls):")
            for entry in daily_usage[-5:]:
                time = datetime.fromisoformat(entry['timestamp']).strftime('%H:%M')
                print(f"  {time} - {entry['model']}: ${entry['cost']:.4f}")
        else:
            print("ðŸ“Š No usage data found")
        
        print(f"\nðŸ’° Total Cost (last {days} days): ${total_cost:.4f}")
        
        # Show model breakdown
        model_usage = {}
        if self.usage_file.exists():
            with open(self.usage_file, 'r') as f:
                for line in f:
                    try:
                        entry = json.loads(line.strip())
                        model = entry['model']
                        model_usage[model] = model_usage.get(model, 0) + entry.get('cost', 0.0)
                    except:
                        continue
        
        if model_usage:
            print("\nðŸ“ˆ Model Usage:")
            for model, cost in model_usage.items():
                print(f"  {model}: ${cost:.4f}")

def main():
    dashboard = QwenDashboard()
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "--daily":
            dashboard.display_report(days=1)
        elif sys.argv[1] == "--weekly":
            dashboard.display_report(days=7)
        elif sys.argv[1] == "--monthly":
            dashboard.display_report(days=30)
        else:
            dashboard.display_report(days=int(sys.argv[1]))
    else:
        dashboard.display_report(days=7)

if __name__ == "__main__":
    main()